version: "3.8"

services:

  database:
    container_name: database-container
    image: postgres
    ports:
      - "8010:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    environment:
      POSTGRESQL_USERNAME : postgres
      POSTGRES_PASSWORD: ""
      POSTGRES_HOST_AUTH_METHOD: 'trust'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      my_network:
        ipv4_address: 10.5.1.2

  pgadmin:
    image: dpage/pgadmin4
    volumes:
      - ./pgadmindata:/var/lib/pgadmin
    depends_on:
      - database
    links:
      - database
    ports:
      - "7777:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
    restart: unless-stopped
    networks:
      my_network:
        ipv4_address: 10.5.1.3

  flights:
    container_name: flights-api
    build:
      context: ./flights
    ports:
      - "8001:8000"
    depends_on:
      database:
        condition: service_healthy
      pgadmin:
        condition: service_started
    volumes:
      - ./flights:/appflight
    environment:
      - HOST=localhost:8000
      - DB_NAME=flightsdb
      - DB_USER=postgres
      - DB_PASSWORD=admin
      - DB_ADDRESS=10.5.1.2
      - DB_PORT=5432
      - FLIGHT_GRPC=10.5.1.11:70001
    # working_dir: ./flights
    # command: python manage.py makemigrations
    # && python ./flights/manage.py migrate && python ./flights/manage.py runserver 0.0.0.0:8001
    # command: ["bash","-c","python manage.py makemigrations && python ./manage.py migrate && python ./manage.py runserver 0.0.0.0:8001"]
    # command: ['ls']
    command: ["bash","-c","python ./manage.py makemigrations && python ./manage.py migrate && python ./manage.py runserver 0.0.0.0:8000"]
    networks:
      my_network:
        ipv4_address: 10.5.1.10
  
  flights-grpc:
    container_name: flights-gRPC
    build:
      context: ./flights
    depends_on:
      database:
        condition: service_healthy
      pgadmin:
        condition: service_started
    volumes:
      - ./flights:/appflight
    environment:
      - HOST=localhost:3000
      - DB_NAME=flightsdb
      - DB_USER=postgres
      - DB_PASSWORD=admin
      - DB_ADDRESS=10.5.1.2
      - DB_PORT=5432
    command: ["bash", "-c", "python manage.py grpcserver --autoreload --port 70001"]
    networks:
      my_network:
        ipv4_address: 10.5.1.11
  
  passengers:
    container_name: passengers-api
    build:
      context: ./passengers
    ports:
      - "8002:8000"
    depends_on:
      database:
        condition: service_healthy
      pgadmin:
        condition: service_started
    volumes:
      - ./passengers:/apppassengers
    environment:
      - HOST=localhost:8000
      - DB_NAME=passengersdb
      - DB_USER=postgres
      - DB_PASSWORD=admin
      - DB_ADDRESS=10.5.1.2
      - DB_PORT=5432
      - FLIGHT_GRPC=10.5.1.11:70001

    command: ["bash","-c","python ./manage.py makemigrations && python ./manage.py migrate && python ./manage.py runserver 0.0.0.0:8000"]
    networks:
      my_network:
        ipv4_address: 10.5.1.20

  tickets:
    container_name: tickets-api
    build:
      context: ./tickets
    ports:
      - "8003:8000"
    depends_on:
      database:
        condition: service_healthy
      pgadmin:
        condition: service_started
    volumes:
      - ./tickets:/apptickets
    environment:
      - HOST=localhost:8000
      - DB_NAME=ticketsdb
      - DB_USER=postgres
      - DB_PASSWORD=admin
      - DB_ADDRESS=10.5.1.2
      - DB_PORT=5432
      - FLIGHT_GRPC=10.5.1.11:70001
    command: ["bash","-c","python ./manage.py makemigrations && python ./manage.py migrate && python ./manage.py runserver 0.0.0.0:8000"]
    networks:
      my_network:
        ipv4_address: 10.5.1.30
  
networks:
  my_network:
    driver: bridge
    # external: true
    ipam:
      config:
        - subnet: 10.5.1.0/24
        #  gateway: 10.5.1.1